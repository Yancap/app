import { About } from '@/components/About'
import { Aside } from '@/components/Aside'
import { Contact } from '@/components/Contact'
import { Hability } from '@/components/Hability'
import { Projects } from '@/components/Projects'
import { getPrismicClient } from '@/services/prismic'
import { GetStaticProps } from 'next'
import { RichText } from 'prismic-dom'
import Head from 'next/head'

interface TechsProjects{
  tech: string;
  image?: string;
}

export interface ProjectProps {
      id: string;
      title: string;
      text: string;
      techs: TechsProjects[],
      image: { alt: string; src: string; },
      src: string | null;
      github: string | null;
}

export interface ProjectsProps {
  projectsPersonal: ProjectProps[];
  projectsGroup: ProjectProps[];
}

export default function Home({projectsPersonal, projectsGroup}: ProjectsProps) {
  
  return (
    <>
      <Head>
        
        <title>Portfolio | Yan</title>
        <link rel="preconnect" href="https://fonts.googleapis.com" />
        <link rel="preconnect" href="https://fonts.gstatic.com" crossOrigin='use-credentials' />
        <link href="https://fonts.googleapis.com/css2?family=Ubuntu:wght@300;400;500;700&display=swap" rel="stylesheet" />
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <section className="grid gap-20 sm:gap-0 sm:grid-cols-2 sm:min-h-screen px-10 relative">
        <aside className="flex flex-col gap-12 sm:sticky top-0 pt-20 pl-0 sm:h-screen sm:py-20 xl:pl-20 lg:pl-10">
          <Aside />
        </aside>
        <main className="flex flex-col gap-20 scroll-smooth pb-20 pr-0 sm:py-20 xl:pr-20 lg:pr-10">
          <About />
          <Hability />
          <Projects projects={{projectsPersonal, projectsGroup}}/>
          <Contact />
        </main>
      </section>
    </>
  )
}
interface Link {
  link_type: string;
  url?: string;
}
export const getStaticProps: GetStaticProps = async () => {
  const prismic = getPrismicClient()
  const response = await prismic.getAllByType("project",
  {
      fetch: [], 
      pageSize: 50
  })
  
  const projects = response.map(response => {
    const content = response.data
    return {
      id: response.uid,
      title: RichText.asText(content.title),
      text: content.text,
      techs: content.techs,
      image: { alt: content.image.alt, src: content.image.url },
      src: (content.src as Link)?.url || null,
      github: (content.github as Link)?.url || null,
      type: content.type,
    }
  })
  const projectsPersonal = projects.filter(project => project.type === 'personal')
  const projectsGroup = projects.filter(project => project.type === 'group')
  
  
  return {
    props: { projectsPersonal, projectsGroup }
  }
}